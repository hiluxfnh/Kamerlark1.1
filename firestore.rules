rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() { return request.auth != null; }
    function isUser(uid) { return isSignedIn() && request.auth.uid == uid; }

    // Users: public read, user can write own doc only
    match /Users/{userId} {
      allow read: if true;
      allow create: if isUser(userId);
      allow update, delete: if isUser(userId);
    }

    // Listings: public read; only owner can create/update/delete
    match /roomdetails/{roomId} {
      allow read: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update, delete: if isSignedIn() && resource.data.ownerId == request.auth.uid;
    }

    // Chat room mapping: visible/editable only to participants (userIds contains requester)
    match /chatRoomMapping/{mappingId} {
      allow read: if isSignedIn() && (resource.data.userIds has request.auth.uid);
      allow create: if isSignedIn() && (request.resource.data.userIds has request.auth.uid);
      allow update, delete: if isSignedIn() && (resource.data.userIds has request.auth.uid);
    }

    // Chat room: visible/editable only to participants; messages readable/creatable only by participants
    match /chatRoom/{roomId} {
      allow read, update, delete: if isSignedIn() && (resource.data.userIds has request.auth.uid);
      allow create: if isSignedIn() && (request.resource.data.userIds has request.auth.uid);
      match /messages/{msgId} {
        allow read, create: if isSignedIn() && (get(/databases/$(database)/documents/chatRoom/$(roomId)).data.userIds has request.auth.uid);
        allow update, delete: if false;
      }
    }

    // Bookings: user can read/create; only the creator can update/delete
    match /bookings/{bookingId} {
      allow read, create: if isSignedIn();
      allow update, delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
